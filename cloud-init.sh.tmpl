#!/bin/bash -x

if [[ $(whoami) == root ]]; then
	echo "Respawning myself as non root"
	chmod 777 $0 # yay
        # use su instead of su to let new shell able to use ulimit
        exec su ubuntu -c "bash $0"
fi

cloud_image_serial=$(cat /etc/cloud/build.info |grep serial|awk '{print $2}')
runner_image_version=$(cat /imagegeneration/imagedata.json|jq .[1].detail|grep -oP "Version: [\d\.]+"|awk '{print $2}')

dd_host="10.1.0.1"

function send_metrics() {
	metrics="github.actions.$1:$${2:-1}|$${3:-c}|#runner_group:${RUNNERGROUP},#runner_image_version:$runner_image_version,#cloud_image_serial:$cloud_image_serial"
	if [[ ! -z "$4" ]]; then metrics="$metrics,$4"; fi
	echo "Send metrics $metrics to $dd_host"
	echo -n "$metrics" > /dev/udp/$dd_host/8125
}

function send_logs() {
	entry="{\"runner_name\":\"${NAME}\",\"runner_group\":\"${RUNNERGROUP}\",\"runner_image_version\":\"$runner_image_version\",\"cloud_image_serial\":\"$cloud_image_serial\",\"$1\":\"$2\"}"
	echo "Send logs $entry to $dd_host"
	echo -n "$entry" > /dev/udp/$dd_host/10518

}

send_metrics runners.started

function send_up_gauge() {
	while true; do
		send_metrics runners.up "1" "g" "#runner_name:${NAME}"
		sleep 30
	done
}
send_up_gauge &

echo "Dropping traffic to metadata endpoint to avoid timeout"
sudo iptables -I OUTPUT -d 169.254.169.254/32 -j REJECT --reject-with icmp-port-unreachable

# echo "Making it faster on cheap SSDs"
sudo mount -o remount,defaults,nobarrier / /

# echo "Creating swapfile"

#sudo fallocate -l 2G /swapfile
#sudo chmod 600 /swapfile
#sudo mkswap /swapfile
#sudo swapon /swapfile
#sudo sysctl -w vm.swappiness=20

#echo "TEMP replace moby with docker"
#sudo apt remove -y moby*
#sudo mkdir -m 0755 -p /etc/apt/keyrings
#curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
#echo \
#  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
#  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
#  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#sudo apt-get update
#sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

echo "Making docker socket less secure"
sudo chmod 777 /var/run/docker.sock

echo "Temporary fix"
rm -f /etc/apt/sources.list.d/microsoft-prod.list

if [[ ! -z "${DOCKER_USER}" && ! -z "${DOCKER_PASS}" ]]; then
	echo "Login docker"
	echo "${DOCKER_PASS}" | docker login --username ${DOCKER_USER} --password-stdin
fi

echo "Update source"
#sudo sysctl net.ipv6.conf.all.disable_ipv6=1
sudo sed -i 's/azure\.archive\.ubuntu\.com\/ubuntu/mirror\.hetzner\.com\/ubuntu\/packages/' /etc/apt/sources.list
sudo sed -i 's/archive\.ubuntu\.com\/ubuntu/mirror\.hetzner\.com\/ubuntu\/packages/' /etc/apt/sources.list
sudo sed -i 's/security\.ubuntu\.com\/ubuntu/mirror\.hetzner\.com\/ubuntu\/packages/' /etc/apt/sources.list

echo "Start installing actions runner ${RUNNER_VER}"

echo "User $USER, UID: $(id)"

cd # goto my home

mkdir actions-runner && cd actions-runner

ARCH=$(arch)
if [[ $ARCH == "x86_64" ]]; then ARCH=x64
else ARCH=arm64
fi

curl -o actions-runner-linux-$${ARCH}-${RUNNER_VER}.tar.gz -L https://github.com/actions/runner/releases/download/v${RUNNER_VER}/actions-runner-linux-$${ARCH}-${RUNNER_VER}.tar.gz

tar xzf ./actions-runner-linux-$${ARCH}-${RUNNER_VER}.tar.gz

sudo mkdir /work
sudo chown $USER /work

cat /imagegeneration/imagedata.json|jq  ".[1].detail |=  .+ \"\nCloud Image Serial: $cloud_image_serial\"" > .setup_info

IFS=$'\r\n'
./config.sh \
	--unattended \
	--replace \
	--ephemeral \
	--name "${NAME}" \
	--work /work \
	--labels "${LABELS}" \
	--runnergroup "${RUNNERGROUP}" \
	--url "${URL}" \
	--token "${TOKEN}" | while read line; do
		echo $line
		send_logs runner_log $line
done
IFS=$' \t\n'


# temporary hack
runner_config=/home/ubuntu/actions-runner/.runner
if [[ ! -e $runner_config ]]; then
    send_logs runner_log "First pass not authenticated, trying hack way"

    IFS=$'\r\n'

    ./config.sh \
            --unattended \
            --replace \
            --name "${NAME}" \
            --work /work \
            --labels "${LABELS}" \
            --runnergroup "${RUNNERGROUP}" \
            --url "${URL}" \
            --token "${TOKEN}" | while read line; do
                    echo $line
                    send_logs runner_log $line
    done

    IFS=$' \t\n'

    jq '.ephemeral=true' $runner_config > x.runner
    mv x.runner $runner_config
fi

send_metrics runners.registered

function finish {
	./config.sh remove --token "${TOKEN}" || true
}
trap finish EXIT

provision_duration_ms=$(awk '{print $1*1000}' /proc/uptime)
send_metrics runner.provision_duration $provision_duration_ms "ms|@1"

IFS=$'\r\n'
./run.sh | while read line; do
	echo $line
	if echo $line | grep -q "Running job: "; then
		start_time_ms=$(date +%s%3N)
	elif echo $line | grep -q "completed with result: "; then
		job_duration_ms=$(($(date +%s%3N)-start_time_ms))
		send_metrics jobs.duration $job_duration_ms "ms|@1"
		send_logs job_duration $job_duration_ms
	fi
	send_logs runner_log $line
done
IFS=$' \t\n'

status=$?
if [[ $status -eq 0 ]]; then send_metrics jobs.completed; fi
send_logs runner_exit $status

./config.sh remove --token "${TOKEN}" || true

sudo poweroff

