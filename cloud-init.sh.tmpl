#!/bin/bash -x

if [[ $(whoami) == root ]]; then
	echo "Respawning myself as non root"
	chmod 777 $0 # yay
	exec sudo -H -u ubuntu bash $0
fi

function send_metrics() {
	v_img=$(cat /imagegeneration/imagedata.json|jq .[1].detail|grep -oP "Version: [\d\.]+"|awk '{print $2}')
	v_base=$cloud_image_serial
	dogstatsd_tags="#runner_name:${NAME},#runner_group:${RUNNERGROUP},#runner_image_version:$v_img,#cloud_image_serial:$v_base"
	host="10.1.0.1"
	metrics="github.actions.$1:$${2:-1}|$${3:-c}|$dogstatsd_tags"
	echo "Send metrics $metrics to $host"
	echo -n "$metrics" > /dev/udp/$host/8125
}

send_metrics runners.started

function send_up_gauge() {
	while true; do
		send_metrics runners.up "1" "g"
		sleep 30
	done
}
send_up_gauge &

echo "Dropping traffic to metadata endpoint to avoid timeout"
sudo iptables -I OUTPUT -d 169.254.169.254/32 -j REJECT --reject-with icmp-port-unreachable

# echo "Making it faster on cheap SSDs"
sudo mount -o remount,defaults,nobarrier / /

# echo "Creating swapfile"

#sudo fallocate -l 2G /swapfile
#sudo chmod 600 /swapfile
#sudo mkswap /swapfile
#sudo swapon /swapfile
#sudo sysctl -w vm.swappiness=20

#echo "TEMP replace moby with docker"
#sudo apt remove -y moby*
#sudo mkdir -m 0755 -p /etc/apt/keyrings
#curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
#echo \
#  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
#  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
#  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#sudo apt-get update
#sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

echo "Making docker socket less secure"
sudo chmod 777 /var/run/docker.sock

if [[ ! -z "${DOCKER_USER}" && ! -z "${DOCKER_PASS}" ]]; then
	echo "Login docker"
	echo "${DOCKER_PASS}" | docker login --username ${DOCKER_USER} --password-stdin
fi

echo "Update source"
#sudo sysctl net.ipv6.conf.all.disable_ipv6=1
sudo sed -i 's/azure\.archive\.ubuntu\.com\/ubuntu/mirror\.hetzner\.com\/ubuntu\/packages/' /etc/apt/sources.list
sudo sed -i 's/archive\.ubuntu\.com\/ubuntu/mirror\.hetzner\.com\/ubuntu\/packages/' /etc/apt/sources.list
sudo sed -i 's/security\.ubuntu\.com\/ubuntu/mirror\.hetzner\.com\/ubuntu\/packages/' /etc/apt/sources.list

echo "Start installing actions runner ${RUNNER_VER}"

echo "User $USER, UID: $(id)"

cd # goto my home

mkdir actions-runner && cd actions-runner

curl -o actions-runner-linux-x64-${RUNNER_VER}.tar.gz -L https://github.com/actions/runner/releases/download/v${RUNNER_VER}/actions-runner-linux-x64-${RUNNER_VER}.tar.gz

tar xzf ./actions-runner-linux-x64-${RUNNER_VER}.tar.gz

sudo mkdir /work
sudo chown $USER /work

cloud_image_serial=$(cat /etc/cloud/build.info |grep serial|awk '{print $2}')
cat /imagegeneration/imagedata.json|jq  ".[1].detail |=  .+ \"\nCloud Image Serial: $cloud_image_serial\"" > .setup_info

./config.sh \
	--unattended \
	--replace \
	--ephemeral \
	--name "${NAME}" \
	--work /work \
	--labels "${LABELS}" \
	--runnergroup "${RUNNERGROUP}" \
	--url "${URL}" \
	--token "${TOKEN}"

send_metrics runners.registered

function finish {
	./config.sh remove --token "${TOKEN}" || true
}
trap finish EXIT

provision_duration_ms=$(awk '{print $1*1000}' /proc/uptime)
send_metrics runner.provision_duration $provision_duration_ms "ms|@1"

function tail_log_for_duration {
	( tail -f -n0 /var/log/cloud-init-output.log & ) | grep -q "Running job: "
	start_time_ms=$(date +%s%3N)
	( tail -f -n0 /var/log/cloud-init-output.log & ) | grep -q "completed with result: "
	job_duration_ms=$(($(date +%s%3N)-start_time_ms))
	send_metrics jobs.duration $job_duration_ms "ms|@1"
}
tail_log_for_duration &

./run.sh

if [[ $? -eq 0 ]]; then send_metrics jobs.completed; fi
send_metrics runners.up "0" "g"

./config.sh remove --token "${TOKEN}" || true

sudo poweroff

